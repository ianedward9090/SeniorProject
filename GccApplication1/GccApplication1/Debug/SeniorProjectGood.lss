
SeniorProjectGood.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001aa  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081b  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ed  00000000  00000000  0000125d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000605  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000217  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000418  00000000  00000000  00001f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000023b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	30 d0       	rcall	.+96     	; 0x114 <main>
  b4:	78 c0       	rjmp	.+240    	; 0x1a6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <USART_Init>:
	int i;
	for(i=0; i < a; i++){
		transmitchar(text[i]);
	}
	
}
  b8:	9c 01       	movw	r18, r24
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	60 e2       	ldi	r22, 0x20	; 32
  c0:	71 ea       	ldi	r23, 0xA1	; 161
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	32 d0       	rcall	.+100    	; 0x12c <__divmodsi4>
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	31 09       	sbc	r19, r1
  cc:	30 93 90 00 	sts	0x0090, r19
  d0:	29 b9       	out	0x09, r18	; 9
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	8a b9       	out	0x0a, r24	; 10
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	80 93 95 00 	sts	0x0095, r24
  dc:	08 95       	ret

000000de <transmitchar>:
  de:	5d 9b       	sbis	0x0b, 5	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <transmitchar>
  e2:	8c b9       	out	0x0c, r24	; 12
  e4:	08 95       	ret

000000e6 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	83 e2       	ldi	r24, 0x23	; 35
  e8:	94 ef       	ldi	r25, 0xF4	; 244
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Init+0x4>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_Init+0xa>
  f0:	00 00       	nop

int LCD_Init (void){
	_delay_ms(250);
	transmitchar(SLCD_CONTROL_HEADER);
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	f4 df       	rcall	.-24     	; 0xde <transmitchar>
	transmitchar(SLCD_POWER_ON);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	f2 df       	rcall	.-28     	; 0xde <transmitchar>
	transmitchar(SLCD_INIT_ACK);
  fa:	85 ea       	ldi	r24, 0xA5	; 165
  fc:	f0 df       	rcall	.-32     	; 0xde <transmitchar>
  fe:	8b e7       	ldi	r24, 0x7B	; 123
 100:	92 e9       	ldi	r25, 0x92	; 146
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Init+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_Init+0x22>
 108:	00 00       	nop
	//transmitchar(SLCD_BACKLIGHT_ON);
	//transmitchar(0x67);
	_delay_ms(150);
	transmitchar(SLCD_CHAR_HEADER);
 10a:	8e ef       	ldi	r24, 0xFE	; 254
 10c:	e8 df       	rcall	.-48     	; 0xde <transmitchar>
return 0;
}
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret

00000114 <main>:
#include <util/delay.h>
int main(void)
{
	//int i=0;
	int j=0;
	PORTD = 0;
 114:	12 ba       	out	0x12, r1	; 18
	DDRD = 0xff;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	81 bb       	out	0x11, r24	; 17
	unsigned int currentazimuth = 0;
	unsigned int currentelevation = 0;
	unsigned int baud = 9600;
	int wise = 2;
	USART_Init (baud);
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	95 e2       	ldi	r25, 0x25	; 37
 11e:	cc df       	rcall	.-104    	; 0xb8 <USART_Init>
	LCD_Init();
 120:	e2 df       	rcall	.-60     	; 0xe6 <LCD_Init>
	transmitchar('2');
 122:	82 e3       	ldi	r24, 0x32	; 50
 124:	dc df       	rcall	.-72     	; 0xde <transmitchar>
		}
	PORTD = 0;*/
		
	return 0;

 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret

0000012c <__divmodsi4>:
 12c:	05 2e       	mov	r0, r21
 12e:	97 fb       	bst	r25, 7
 130:	16 f4       	brtc	.+4      	; 0x136 <__divmodsi4+0xa>
 132:	00 94       	com	r0
 134:	06 d0       	rcall	.+12     	; 0x142 <__divmodsi4_neg1>
 136:	57 fd       	sbrc	r21, 7
 138:	0c d0       	rcall	.+24     	; 0x152 <__divmodsi4_neg2>
 13a:	13 d0       	rcall	.+38     	; 0x162 <__udivmodsi4>
 13c:	07 fc       	sbrc	r0, 7
 13e:	09 d0       	rcall	.+18     	; 0x152 <__divmodsi4_neg2>
 140:	7e f4       	brtc	.+30     	; 0x160 <__divmodsi4_exit>

00000142 <__divmodsi4_neg1>:
 142:	90 95       	com	r25
 144:	80 95       	com	r24
 146:	70 95       	com	r23
 148:	61 95       	neg	r22
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	8f 4f       	sbci	r24, 0xFF	; 255
 14e:	9f 4f       	sbci	r25, 0xFF	; 255
 150:	08 95       	ret

00000152 <__divmodsi4_neg2>:
 152:	50 95       	com	r21
 154:	40 95       	com	r20
 156:	30 95       	com	r19
 158:	21 95       	neg	r18
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	4f 4f       	sbci	r20, 0xFF	; 255
 15e:	5f 4f       	sbci	r21, 0xFF	; 255

00000160 <__divmodsi4_exit>:
 160:	08 95       	ret

00000162 <__udivmodsi4>:
 162:	a1 e2       	ldi	r26, 0x21	; 33
 164:	1a 2e       	mov	r1, r26
 166:	aa 1b       	sub	r26, r26
 168:	bb 1b       	sub	r27, r27
 16a:	fd 01       	movw	r30, r26
 16c:	0d c0       	rjmp	.+26     	; 0x188 <__udivmodsi4_ep>

0000016e <__udivmodsi4_loop>:
 16e:	aa 1f       	adc	r26, r26
 170:	bb 1f       	adc	r27, r27
 172:	ee 1f       	adc	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	a2 17       	cp	r26, r18
 178:	b3 07       	cpc	r27, r19
 17a:	e4 07       	cpc	r30, r20
 17c:	f5 07       	cpc	r31, r21
 17e:	20 f0       	brcs	.+8      	; 0x188 <__udivmodsi4_ep>
 180:	a2 1b       	sub	r26, r18
 182:	b3 0b       	sbc	r27, r19
 184:	e4 0b       	sbc	r30, r20
 186:	f5 0b       	sbc	r31, r21

00000188 <__udivmodsi4_ep>:
 188:	66 1f       	adc	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	88 1f       	adc	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	1a 94       	dec	r1
 192:	69 f7       	brne	.-38     	; 0x16e <__udivmodsi4_loop>
 194:	60 95       	com	r22
 196:	70 95       	com	r23
 198:	80 95       	com	r24
 19a:	90 95       	com	r25
 19c:	9b 01       	movw	r18, r22
 19e:	ac 01       	movw	r20, r24
 1a0:	bd 01       	movw	r22, r26
 1a2:	cf 01       	movw	r24, r30
 1a4:	08 95       	ret

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
