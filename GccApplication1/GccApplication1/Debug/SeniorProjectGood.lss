
SeniorProjectGood.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000206  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000009f3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b85  00000000  00000000  00000ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ce  00000000  00000000  00001647  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000767  00000000  00000000  00001b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022e  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000430  00000000  00000000  000025f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	5f d0       	rcall	.+190    	; 0x172 <main>
  b4:	a6 c0       	rjmp	.+332    	; 0x202 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <USART_Init>:
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC)) )
	;
	/* Get and return received data from buffer */
	return UDR0;
}
  b8:	10 92 90 00 	sts	0x0090, r1
  bc:	85 e3       	ldi	r24, 0x35	; 53
  be:	89 b9       	out	0x09, r24	; 9
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 95 00 	sts	0x0095, r24
  ca:	08 95       	ret

000000cc <transmitchar>:
  cc:	5d 9b       	sbis	0x0b, 5	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <transmitchar>
  d0:	8c b9       	out	0x0c, r24	; 12
  d2:	08 95       	ret

000000d4 <transmitstring>:
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	16 16       	cp	r1, r22
  de:	17 06       	cpc	r1, r23
  e0:	54 f4       	brge	.+20     	; 0xf6 <transmitstring+0x22>
  e2:	c8 2f       	mov	r28, r24
  e4:	d9 2f       	mov	r29, r25
  e6:	8e 01       	movw	r16, r28
  e8:	06 0f       	add	r16, r22
  ea:	17 1f       	adc	r17, r23
  ec:	89 91       	ld	r24, Y+
  ee:	ee df       	rcall	.-36     	; 0xcc <transmitchar>
  f0:	c0 17       	cp	r28, r16
  f2:	d1 07       	cpc	r29, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <transmitstring+0x18>
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	81 ee       	ldi	r24, 0xE1	; 225
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <LCD_Init+0x6>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_Init+0x10>
 110:	00 00       	nop

int LCD_Init (void){

	_delay_ms(200);
	transmitchar(SLCD_CONTROL_HEADER);
 112:	8f e9       	ldi	r24, 0x9F	; 159
 114:	db df       	rcall	.-74     	; 0xcc <transmitchar>
	transmitchar(SLCD_POWER_ON);
 116:	83 e8       	ldi	r24, 0x83	; 131
 118:	d9 df       	rcall	.-78     	; 0xcc <transmitchar>
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	97 e2       	ldi	r25, 0x27	; 39
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Init+0x1e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_Init+0x24>
 124:	00 00       	nop
	_delay_ms(5);
	transmitchar(SLCD_INIT_ACK);
 126:	85 ea       	ldi	r24, 0xA5	; 165
 128:	d1 df       	rcall	.-94     	; 0xcc <transmitchar>
 12a:	8f e1       	ldi	r24, 0x1F	; 31
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_Init+0x2e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_Init+0x34>
 134:	00 00       	nop
 136:	8f e1       	ldi	r24, 0x1F	; 31
 138:	9e e4       	ldi	r25, 0x4E	; 78
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_Init+0x3a>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_Init+0x40>
 140:	00 00       	nop
	_delay_ms(10);
	//transmitchar(SLCD_BACKLIGHT_ON);
	_delay_ms(10);
	transmitchar(SLCD_CHAR_HEADER);
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	c3 df       	rcall	.-122    	; 0xcc <transmitchar>
 146:	9f ef       	ldi	r25, 0xFF	; 255
 148:	20 e7       	ldi	r18, 0x70	; 112
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	91 50       	subi	r25, 0x01	; 1
 14e:	20 40       	sbci	r18, 0x00	; 0
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <LCD_Init+0x4c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Init+0x56>
 156:	00 00       	nop
	_delay_ms(100);
return 0;
}
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret

0000015e <nextline>:

void nextline(void){
	
	transmitchar(0x9F);
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	b5 df       	rcall	.-150    	; 0xcc <transmitchar>
	transmitchar(0xFF);
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	b3 df       	rcall	.-154    	; 0xcc <transmitchar>
	transmitchar(0x00);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	b1 df       	rcall	.-158    	; 0xcc <transmitchar>
	transmitchar(0x01);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	af df       	rcall	.-162    	; 0xcc <transmitchar>
	transmitchar(0xFE);
 16e:	8e ef       	ldi	r24, 0xFE	; 254
 170:	ad cf       	rjmp	.-166    	; 0xcc <transmitchar>

00000172 <main>:

int main(void)
{
	//int i=0;
	int j = 0;
	PORTD = 0; //for motor control
 172:	12 ba       	out	0x12, r1	; 18
	DDRD = 0xff;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x00;
 178:	12 b8       	out	0x02, r1	; 2
	PORTE = (1<<PE6) | (1<<PE7);
 17a:	80 ec       	ldi	r24, 0xC0	; 192
 17c:	83 b9       	out	0x03, r24	; 3
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	84 e3       	ldi	r24, 0x34	; 52
 182:	9c e0       	ldi	r25, 0x0C	; 12
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x12>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x1c>
 18e:	00 00       	nop
	unsigned int currentazimuth = 0; //keeping track of azimuth
	unsigned int currentelevation = 0;//keeping track of elevation
	unsigned int baud = 9600;
	int wise = 2; //how many steps to take
	_delay_ms(500);
	USART_Init (baud);
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	95 e2       	ldi	r25, 0x25	; 37
 194:	91 df       	rcall	.-222    	; 0xb8 <USART_Init>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	82 e5       	ldi	r24, 0x52	; 82
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x2a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x34>
 1a6:	00 00       	nop
	_delay_ms(300);
	LCD_Init();
 1a8:	ab df       	rcall	.-170    	; 0x100 <LCD_Init>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	80 e7       	ldi	r24, 0x70	; 112
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x3e>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x48>
 1ba:	00 00       	nop
	_delay_ms(100);
	transmitstring("Data Points?",12);
 1bc:	6c e0       	ldi	r22, 0x0C	; 12
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	87 df       	rcall	.-242    	; 0xd4 <transmitstring>
	nextline();
 1c6:	cb df       	rcall	.-106    	; 0x15e <nextline>
	while(1){
			if (RED_BUTTON){
 1c8:	0f 99       	sbic	0x01, 7	; 1
 1ca:	0f c0       	rjmp	.+30     	; 0x1ea <main+0x78>
				transmitstring("boobs",5);
 1cc:	65 e0       	ldi	r22, 0x05	; 5
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	7f df       	rcall	.-258    	; 0xd4 <transmitstring>
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	89 e6       	ldi	r24, 0x69	; 105
 1da:	98 e1       	ldi	r25, 0x18	; 24
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x6a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x74>
 1e6:	00 00       	nop
 1e8:	ef cf       	rjmp	.-34     	; 0x1c8 <main+0x56>
				_delay_ms(1000);
				} else {
				
				transmitchar('b');
 1ea:	82 e6       	ldi	r24, 0x62	; 98
 1ec:	6f df       	rcall	.-290    	; 0xcc <transmitchar>
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	89 e6       	ldi	r24, 0x69	; 105
 1f2:	98 e1       	ldi	r25, 0x18	; 24
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x82>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x8c>
 1fe:	00 00       	nop
 200:	e3 cf       	rjmp	.-58     	; 0x1c8 <main+0x56>

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
