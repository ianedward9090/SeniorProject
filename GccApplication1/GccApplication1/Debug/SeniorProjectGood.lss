
SeniorProjectGood.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000063f  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002af  00000000  00000000  00001065  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ae  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ac  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035b  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	7f c0       	rjmp	.+254    	; 0x1b4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

int main(void)
{
	int i=0;
	
	PORTD = 0;
  b8:	12 ba       	out	0x12, r1	; 18
	DDRD = 0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	81 bb       	out	0x11, r24	; 17
	unsigned int current = 0;
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
		//for(i=0; i<50;i++){
			//counterclockwise();

		//}

		current = rotate_relative_azimuth(current, -201);
  c2:	67 e3       	ldi	r22, 0x37	; 55
  c4:	7f ef       	ldi	r23, 0xFF	; 255
  c6:	82 2f       	mov	r24, r18
  c8:	93 2f       	mov	r25, r19
  ca:	17 d0       	rcall	.+46     	; 0xfa <rotate_relative_azimuth>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	34 e3       	ldi	r19, 0x34	; 52
  d0:	4c e0       	ldi	r20, 0x0C	; 12
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	30 40       	sbci	r19, 0x00	; 0
  d6:	40 40       	sbci	r20, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x1a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x24>
  dc:	00 00       	nop
		_delay_ms(500);
		current = rotate_relative_azimuth(current, 201);
  de:	69 ec       	ldi	r22, 0xC9	; 201
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	0b d0       	rcall	.+22     	; 0xfa <rotate_relative_azimuth>
  e4:	9c 01       	movw	r18, r24
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	94 e3       	ldi	r25, 0x34	; 52
  ea:	4c e0       	ldi	r20, 0x0C	; 12
  ec:	81 50       	subi	r24, 0x01	; 1
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	40 40       	sbci	r20, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x34>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x3e>
  f6:	00 00       	nop
  f8:	e4 cf       	rjmp	.-56     	; 0xc2 <main+0xa>

000000fa <rotate_relative_azimuth>:
	_delay_ms(5);
	PORTD = 0b00001010;
	_delay_ms(5);
}

unsigned int rotate_relative_azimuth(int current_state, int steps) {
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	28 97       	sbiw	r28, 0x08	; 8
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
 116:	ac 01       	movw	r20, r24
	unsigned int states[] = {0b00000110, 0b00000101, 0b00001001, 0b00001010};
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	de 01       	movw	r26, r28
 120:	11 96       	adiw	r26, 0x01	; 1
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	8a 95       	dec	r24
 128:	e1 f7       	brne	.-8      	; 0x122 <rotate_relative_azimuth+0x28>
	unsigned int next_state = current_state;
 12a:	da 01       	movw	r26, r20
	unsigned int current_upper_PORTD = 0;
	
	int i;
	for (i = 0; i < abs(steps); i++) {
 12c:	8b 01       	movw	r16, r22
 12e:	77 23       	and	r23, r23
 130:	24 f4       	brge	.+8      	; 0x13a <rotate_relative_azimuth+0x40>
 132:	00 27       	eor	r16, r16
 134:	11 27       	eor	r17, r17
 136:	06 1b       	sub	r16, r22
 138:	17 0b       	sbc	r17, r23
 13a:	10 16       	cp	r1, r16
 13c:	11 06       	cpc	r1, r17
 13e:	54 f5       	brge	.+84     	; 0x194 <rotate_relative_azimuth+0x9a>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
		if (steps < 0) {
 144:	77 23       	and	r23, r23
 146:	1c f4       	brge	.+6      	; 0x14e <rotate_relative_azimuth+0x54>
			next_state = current_state - 1;
 148:	da 01       	movw	r26, r20
 14a:	11 97       	sbiw	r26, 0x01	; 1
 14c:	05 c0       	rjmp	.+10     	; 0x158 <rotate_relative_azimuth+0x5e>
		} else if (steps > 0) {
 14e:	16 16       	cp	r1, r22
 150:	17 06       	cpc	r1, r23
 152:	14 f4       	brge	.+4      	; 0x158 <rotate_relative_azimuth+0x5e>
			next_state = current_state + 1;
 154:	da 01       	movw	r26, r20
 156:	11 96       	adiw	r26, 0x01	; 1
		}
		
		// Preserve the upper four bits
		current_upper_PORTD = PORTD&0xF0;
 158:	42 b3       	in	r20, 0x12	; 18
		
		
		// Set the lower four bits according to state
		PORTD = states[next_state%4] | current_upper_PORTD;
 15a:	cd 01       	movw	r24, r26
 15c:	83 70       	andi	r24, 0x03	; 3
 15e:	99 27       	eor	r25, r25
 160:	fc 01       	movw	r30, r24
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	ee 24       	eor	r14, r14
 168:	e3 94       	inc	r14
 16a:	f1 2c       	mov	r15, r1
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	ee 0d       	add	r30, r14
 172:	ff 1d       	adc	r31, r15
		} else if (steps > 0) {
			next_state = current_state + 1;
		}
		
		// Preserve the upper four bits
		current_upper_PORTD = PORTD&0xF0;
 174:	40 7f       	andi	r20, 0xF0	; 240
		
		
		// Set the lower four bits according to state
		PORTD = states[next_state%4] | current_upper_PORTD;
 176:	50 81       	ld	r21, Z
 178:	45 2b       	or	r20, r21
 17a:	42 bb       	out	0x12, r20	; 18
		current_state = next_state%4;
 17c:	ac 01       	movw	r20, r24
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	97 e2       	ldi	r25, 0x27	; 39
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <rotate_relative_azimuth+0x88>
 186:	00 c0       	rjmp	.+0      	; 0x188 <rotate_relative_azimuth+0x8e>
 188:	00 00       	nop
	unsigned int states[] = {0b00000110, 0b00000101, 0b00001001, 0b00001010};
	unsigned int next_state = current_state;
	unsigned int current_upper_PORTD = 0;
	
	int i;
	for (i = 0; i < abs(steps); i++) {
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
 18e:	20 17       	cp	r18, r16
 190:	31 07       	cpc	r19, r17
 192:	c1 f6       	brne	.-80     	; 0x144 <rotate_relative_azimuth+0x4a>
		current_state = next_state%4;
		
		// Delay 10ms between steps
		_delay_ms(5);
	}
	PORTD = 0;
 194:	12 ba       	out	0x12, r1	; 18
	return current_state;
}
 196:	84 2f       	mov	r24, r20
 198:	95 2f       	mov	r25, r21
 19a:	28 96       	adiw	r28, 0x08	; 8
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
